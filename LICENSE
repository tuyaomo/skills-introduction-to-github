import cv2
import numpy as np
import pyautogui
import win32api
import win32con
import time

# ===== 配置参数 =====
CAPTURE_REGION = (800, 450, 1280, 720)  # 屏幕捕捉区域(x,y,width,height)
TARGET_COLOR_LOWER = np.array([40, 60, 200])  # 敌人轮廓颜色范围（BGR格式）
TARGET_COLOR_UPPER = np.array([60, 80, 250])
SNAP_RADIUS = 80  # 吸附触发半径（像素）
ADJUST_SPEED = 0.2  # 准星移动速度系数
POLLING_RATE = 30  # 检测频率（Hz）
# ===================

def find_target_center(frame):
    """通过颜色识别定位目标中心"""
    mask = cv2.inRange(frame, TARGET_COLOR_LOWER, TARGET_COLOR_UPPER)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    if contours:
        largest = max(contours, key=cv2.contourArea)
        (x,y,w,h) = cv2.boundingRect(largest)
        return (x + w//2 + CAPTURE_REGION[0], 
                y + h//2 + CAPTURE_REGION[1])
    return None

def smooth_move(dx, dy):
    """模拟人类鼠标移动"""
    steps = max(abs(dx), abs(dy)) // 2
    pyautogui.moveRel(dx, dy, duration=steps/1000, _pause=False)

def main():
    print("准星辅助系统启动 - 按下ESC退出")
    while True:
        start_time = time.perf_counter()
        
        # 获取鼠标状态
        fire_btn_pressed = win32api.GetKeyState(win32con.VK_LBUTTON) < 0
        
        # 截屏处理
        screen = pyautogui.screenshot(region=CAPTURE_REGION)
        frame = cv2.cvtColor(np.array(screen), cv2.COLOR_RGB2BGR)
        
        # 目标检测
        target_pos = find_target_center(frame)
        
        # 准星调整逻辑
        if fire_btn_pressed and target_pos:
            cx, cy = pyautogui.position()
            dx = target_pos[0] - cx
            dy = target_pos[1] - cy
            distance = (dx**2 + dy**2)**0.5
            
            if distance < SNAP_RADIUS:
                smooth_move(int(dx*ADJUST_SPEED), int(dy*ADJUST_SPEED))
        
        # 退出检测
        if win32api.GetAsyncKeyState(win32con.VK_ESCAPE):
            break
            
        # 维持检测频率
        elapsed = time.perf_counter() - start_time
        time.sleep(max(1/POLLING_RATE - elapsed, 0))

if __name__ == "__main__":
    main()
